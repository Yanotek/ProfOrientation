using ProfTests.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProfTests.Data
{
    /// <summary>
    /// Было много сомнений на счет того, как доставать вопросы.
    /// Было бы гараздо лучше хранить их в Json, но для возможности распарсить не было.
    /// Так и так пришлось бы писать руками, а времени на то, чтобы сделать прилжение для ввода вопросов сейчас нет.
    /// Да и в будущем можно будет просто изменить метод ввода и логика приложения не изменится.
    /// </summary>
    public static class Input
    {
        public static Methodic PrimaryMethodic()
        {
            List<Question> questions = new List<Question>
            {
                new Question("Можно ли прожить всю жизнь, не трудясь? Как ты к этому относишься?", "")
                {
                    Answers = new List<AnswerChoice>()
                    {
                        new AnswerChoice("не знаю, не задумывался", 2),
                        new AnswerChoice("можно, но это неинтересно", 3),
                        new AnswerChoice("можно, и это интересно, можно делать все что хочешь", 1)
                    }
                },
                new Question("Зачем люди трудятся?", "")
                {
                    Answers = new List<AnswerChoice>()
                    {
                        new AnswerChoice("чтобы получать деньги", 2),
                        new AnswerChoice("труд приносит радость, делает человека уважаемым в обществе", 1),
                        new AnswerChoice("не знаю", 1)
                    }
                },
                new Question("Ты хотел бы, чтобы твоя работа была…", "")
                {
                    Answers = new List<AnswerChoice>()
                    {
                        new AnswerChoice("интересной и полезной людям ", 3),
                        new AnswerChoice("не обязательно интересной, но высокооплачиваемой", 2),
                        new AnswerChoice("я об этом еще не думал", 1)
                    }
                },
                new Question("Кого можно назвать трудолюбивым человеком?", "")
                {
                    Answers = new List<AnswerChoice>()
                    {
                        new AnswerChoice("того, кто трудится честно, выполняет качественно свою работу", 2),
                        new AnswerChoice("того, кто трудится с любовью ", 3),
                        new AnswerChoice("не знаю", 1)
                    }
                },

            };

            int i = 1;
            questions.ForEach(x => x.Number = i++);

            return new Methodic()
            {
                Questions = questions,
                CalcResult = (methodic) =>
                {
                    int scores = 0;
                    foreach(var quest in methodic.Questions)
                    {
                        foreach(var answer in quest.Answers)
                        {
                            if (answer.IsSelected == true)
                                scores += answer.ScoreCount;
                        }
                    }

                    Dictionary<int, string> levels = new Dictionary<int, string>()
                    {
                        [12] = "Высокий",
                        [8] = "Средний",
                        [0] = "Низкий"
                    };

                    methodic.TestResult = new List<TestResult>
                    {
                        new TestResult("Уровень", levels.First(x => scores >= x.Key).Value)
                    };
                }
            };
        }

        public static Methodic PrimaryMethodicSecond()
        {
            List<Question> questions = new List<Question>
            {
                CreateLikeAnswer("Обслуживать людей", "1"),
                CreateLikeAnswer("Заниматься леченим", "1"),
                CreateLikeAnswer("Обучать, воспитывать", "1"),
                CreateLikeAnswer("Защищать права", "1"),
                CreateLikeAnswer("Управлять людьми", "1"),

                CreateLikeAnswer("Управлять машинами", "2"),
                CreateLikeAnswer("Ремонтировать оборудование", "2"),
                CreateLikeAnswer("Обрабатывать материалы, изготавливать различные вещи", "2"),
                CreateLikeAnswer("Заниматься строительством", "2"),
                CreateLikeAnswer("Собирать и налаживать технику", "2"),

                CreateLikeAnswer("Производить расчеты и вычисления", "3"),
                CreateLikeAnswer("Перерабатывать информацию", "3"),
                CreateLikeAnswer("Обрабатывать тексты и таблицы", "3"),
                CreateLikeAnswer("Работать с чертежами, картами, схемами", "3"),
                CreateLikeAnswer("Принимать и передавать сигналы и сообщения", "3"),

                CreateLikeAnswer("Заниматься художественным оформлением", "4"),
                CreateLikeAnswer("Рисовать, фотографировать", "4"),
                CreateLikeAnswer("Создавать произведения искусства", "4"),
                CreateLikeAnswer("Выступать на сцене", "4"),
                CreateLikeAnswer("Шить, вязать, вышивать", "4"),

                CreateLikeAnswer("Ухаживать за животными", "5"),
                CreateLikeAnswer("Заготавливать продукты", "5"),
                CreateLikeAnswer("Работать на открытом воздухе", "5"),
                CreateLikeAnswer("Выращивать овощи и фрукты", "5"),
                CreateLikeAnswer("Иметь дело с природой", "5"),

                CreateLikeAnswer("Работать руками", "A"),
                CreateLikeAnswer("Выпронять решения", "A"),
                CreateLikeAnswer("Воспроизводить имеющиеся образцы, размножать и копировать", "A"),
                CreateLikeAnswer("Получать конкретный практический результат", "A"),
                CreateLikeAnswer("Воплощать идеи в жизнь", "A"),

                CreateLikeAnswer("Работать головой", "B"),
                CreateLikeAnswer("Принимать решения", "B"),
                CreateLikeAnswer("Создавать новые образцы", "B"),
                CreateLikeAnswer("Анализировать, изучать, измерять, испытывать, контролировать", "B"),
                CreateLikeAnswer("Планировать, конструировать, проектировать, разрабатывать, моделировать", "B"),

                CreateCanAnswer("Знакомиться с нужными людьми", "1"),
                CreateCanAnswer("Быть чутким и доброжелательным", "1"),
                CreateCanAnswer("Выслушивать людей", "1"),
                CreateCanAnswer("Разбираться в людях", "1"),
                CreateCanAnswer("Хорошо говорить и выступать публично", "1"),

                CreateCanAnswer("Искать и устранять неисправности", "2"),
                CreateCanAnswer("Использовать приборы, машины, механизмы", "2"),
                CreateCanAnswer("Разбиратсья в технических устройствах", "2"),
                CreateCanAnswer("Легко обращаться с инструментами", "2"),
                CreateCanAnswer("Хорошо ориентироваться в пространстве", "2"),

                CreateCanAnswer("Быть сосредоточенным и усидчивым", "3"),
                CreateCanAnswer("Хорошо считать в уме", "3"),
                CreateCanAnswer("Кодировать информацию", "3"),
                CreateCanAnswer("Оперировать знаками и символами", "3"),
                CreateCanAnswer("Искать и исправлять ошибки", "3"),

                CreateCanAnswer("Разбираться в литературе, искусстве", "4"),
                CreateCanAnswer("Петь, играть на музыкальных инструментах", "4"),
                CreateCanAnswer("Сочинять стихи, писать рассказы", "4"),
                CreateCanAnswer("Рисовать", "4"),
                CreateCanAnswer("Создавать красивые, со вкусом сделанные вещи", "4"),

                CreateCanAnswer("Разбираться в животных и растениях", "5"),
                CreateCanAnswer("Бороться с болезнями, вредителями", "5"),
                CreateCanAnswer("Ориентировать в природных условиях", "5"),
                CreateCanAnswer("Разводить животных или растения", "5"),
                CreateCanAnswer("Работать на земле", "5"),

                CreateCanAnswer("Быстро выполнять указания", "A"),
                CreateCanAnswer("Точно следовать инструкциям", "A"),
                CreateCanAnswer("Работать по заданному алгоритму", "A"),
                CreateCanAnswer("Выполнять однообразную работу", "A"),
                CreateCanAnswer("Соблюдать правила и нормативы", "A"),

                CreateCanAnswer("Создавать новые инструкции и давать указания", "B"),
                CreateCanAnswer("Принимать нестандартные решения", "B"),
                CreateCanAnswer("Легко придумывать новые способы деятельности", "B"),
                CreateCanAnswer("Брать на себя ответственность", "B"),
                CreateCanAnswer("Самостоятельно организовывать свою работу", "B"),
            };

            int i = 1;
            questions.ForEach(x => x.Number = i++);

            return new Methodic()
            {
                Questions = questions,
                CalcResult = (methodic) =>
                {
                    Dictionary<string, string> typeOfProffesional = new Dictionary<string, string>
                    {
                        ["1"] = "человек- человек",
                        ["2"] = "человек- техника",
                        ["3"] = "человек- знаковая система",
                        ["4"] = "человек- художественный образ",
                        ["5"] = "человек- природа",
                        ["A"] = "исполнительский",
                        ["B"] = "творческий",
                    };

                    var res = questions.GroupBy(x => x.Group).Select(x => Tuple.Create(x.Key, x.Sum(c => c.Answers.Sum(y => y.ScoreCount))));
                    var firstRes = res.Take(5).First(x => x.Item2 == res.Take(5).Max(p => p.Item2));
                    var secondRes = res.Skip(5).First(x => x.Item2 == res.Skip(5).Max(p => p.Item2));

                    methodic.TestResult = new List<TestResult>
                    {
                        new TestResult("Тип профессии", typeOfProffesional.First(x=> x.Key == firstRes.Item1).Value),
                        new TestResult("Класс профессии", typeOfProffesional.First(x=> x.Key == secondRes.Item1).Value),
                    };
                }
            };
        }

        private static Question CreateLikeAnswer(string header, string group)
        {
            return new Question(header, group)
            {
                Answers = new List<AnswerChoice>()
                {
                    new AnswerChoice("Совсем не нравится", 0),
                    new AnswerChoice("Может быть нравится", 1),
                    new AnswerChoice("Нравится", 2),
                    new AnswerChoice("Очень нравится", 3),
                }
            };
        }

        private static Question CreateCanAnswer(string header, string group)
        {
            return new Question(header, group)
            {
                Answers = new List<AnswerChoice>()
                {
                    new AnswerChoice("Совсем не могу", 0),
                    new AnswerChoice("Может быть могу", 1),
                    new AnswerChoice("Могу", 2),
                    new AnswerChoice("Очень хорошо могу", 3),
                }
            };
        }

        private static Question CreateTupleAnswer(List<Tuple<int, string>> tuples)
        {
            return new Question("Выберите одну специальность, которую вы считаете более подходящей для вас.")
            {
                Answers = new List<AnswerChoice>(tuples.Select(x => new AnswerChoice(x.Item2, x.Item1)))
            };
        }

        private static Question CreateImportantlyScaleAnswer(string text, string group)
        {
            return new Question("Насколько важным является для Вас каждое из следующих утверждений:", group)
            {
                Answers = new List<AnswerChoice>
                {
                    new AnswerChoice(text, 5)
                }
            };
        }

        private static Question CreateConsonantScaleAnswer(string text, string group)
        {
            return new Question("Насколько Вы согласны с каждым из следующих утверждений?", group)
            {
                Answers = new List<AnswerChoice>
                {
                    new AnswerChoice(text, 5)
                }
            };
        }

        public static Methodic SecondarySchool()
        {
            List<Question> questions = new List<Question>
            {
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Археолог"),
                    Tuple.Create(6, "Реставратор произведений искусств")
                }),
                 CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Специалист по связям с общественностью"),
                    Tuple.Create(4, "Страховой агент")
                }),
                 CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(4, "Нотариус"),
                    Tuple.Create(6, "Телеведущий")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Ученый-геолог"),
                    Tuple.Create(3, "Туристический агент")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Метеоролог"),
                    Tuple.Create(4, "Эксперт-оценщик имущества")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Фармацевт"),
                    Tuple.Create(6, "Архитектор")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(4, "Налоговый инспектор"),
                    Tuple.Create(5, "Директор по финансам")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Шеф-повар"),
                    Tuple.Create(4, "Офиццер федеральной службы безопасности")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(5, "Начальник стройки"),
                    Tuple.Create(1, "Проектировщик домов")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Геолог-нефтяник"),
                    Tuple.Create(4, "Контролер качества технологического процесса")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Спасатель"),
                    Tuple.Create(6, "Дизайнер интерьеров")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(5, "Маркетолог"),
                    Tuple.Create(3, "Агент по недвижимости")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Тренер-инструктор"),
                    Tuple.Create(1, "Инженер мобильной связи")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Машинист электропоезда"),
                    Tuple.Create(3, "Логопед")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(6, "Студийный фотограф"),
                    Tuple.Create(2, "Лингвист-востоковед")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Искусствовед"),
                    Tuple.Create(3, "Преподаватель физико-математичесских наук")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Гид-переводчик"),
                    Tuple.Create(5, "Начальник отдела кадров")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(4, "Спортивный арбитр"),
                    Tuple.Create(6, "Веб-дизайнер")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(5, "Руководитель предприятия"),
                    Tuple.Create(6, "Обозреватель политических событий")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Редактор научной литературы"),
                    Tuple.Create(4, "Аудитор")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Врач-терапевт"),
                    Tuple.Create(5, "Командир военной части")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Водолаз"),
                    Tuple.Create(2, "Бактериолог")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Ученый-экономист"),
                    Tuple.Create(5, "Директор супермаркета")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Инженер-конструктор"),
                    Tuple.Create(5, "Управляющий производством")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(6, "Поэт-переводчик"),
                    Tuple.Create(2, "Ученый в области геологии")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(4, "Судья"),
                    Tuple.Create(3, "Психоаналитик")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Инженер-испытатель двигателей"),
                    Tuple.Create(5, "Главный инженер по строительству")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Инструктор по фитнесу"),
                    Tuple.Create(6, "Журналист")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(4, "Ревизор"),
                    Tuple.Create(5, "Директор театра")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Травматолог"),
                    Tuple.Create(4, "Сотрудник ГИБДД")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Ученый-математик"),
                    Tuple.Create(4, "Авиадиспетчер")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(5, "Кинорежиссер"),
                    Tuple.Create(6, "Артист в шоу-бизнесе")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Дознаватель"),
                    Tuple.Create(1, "Водитель транспортного средства")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(4, "Инкассатор"),
                    Tuple.Create(1, "Специалист по ремонту автомобилей")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(3, "Педиатр"),
                    Tuple.Create(6, "Имиджмейкер")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Пожарный"),
                    Tuple.Create(6, "Комментатор соревнований")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Судовой электромеханик"),
                    Tuple.Create(5, "Штурман корабля")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(6, "Ди-джей"),
                    Tuple.Create(4, "Программист")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Хранитель музейных фондов"),
                    Tuple.Create(5, "Декан факультета")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(6, "Корреспондент"),
                    Tuple.Create(5, "Предпрениматель")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Взрывотехник"),
                    Tuple.Create(6, "Каскадер")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Инженер садово-паркового хозяйства"),
                    Tuple.Create(2, "Научный сотрудник в области генетики")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(2, "Океанолог"),
                    Tuple.Create(3, "Врач-терапевт")
                }),
                CreateTupleAnswer(new List<Tuple<int, string>>
                {
                    Tuple.Create(1, "Авиационный механик"),
                    Tuple.Create(2, "Физик-ядерщик")
                }),
            };

            int i = 1;
            questions.ForEach(x => x.Number = i++);

            return new Methodic()
            {
                Questions = questions,
                CalcResult = (methodic) =>
                {
                    Dictionary<int, Tuple<string, string>> typeOfProffesional = new Dictionary<int, Tuple<string, string>>
                    {
                        [1] = Tuple.Create("реалистичный или практический тип", @"Вы – практик, склонный заниматься конкретными делами. Предпочитаешь работу, дающую ощутимые результаты для себя и для других. Вас не пугает физический труд, интересует работа с техникой, требующая практического склада ума, сформированных двигательных умений и навыков.
Ваша сильная сторона – практическая исполнительность.
Вы обладаете низкой чувствительностью, эмоциональной устойчивостью, стабильностью, слабой ориентацией на социальные нормы. Склонны заниматься конкретными вещами и их использованием, отдаете предпочтение занятиям, требующим применения физической силы, ловкости. 
Ориентированы, в основном, на практический труд, быстрый результат деятельности. В интеллектуальной сфере, в большей степени, преобладают математические способности. Способности к общению с людьми, формулировке и изложению мыслей развиты слабее.
Чаще люди этого типа выбирают профессии, которые предполагают решение конкретных задач, наличие подвижности, настойчивости, связь с техникой. Общение не является ведущим в структуре деятельности, а связано, скорее, с приемом и переработкой информации.
Рекомендуемые профессии: механик, электрик, инженер, водитель.
"),
                        [2] = Tuple.Create("интеллектуальный тип", @"Вы, скорее, теоретик, чем практик. Вам нравится заниматься изучением, исследованием какой-либо проблемы, получением новых знаний. Вы предпочитаете работу, приносящую радость познания, а иногда и радость открытия; работу, требующую абстрактного мышления, способностей к анализу и систематизации информации, широкого кругозора. В подчинении работаете хуже, чем самостоятельно. 
Ваша сильная сторона – способность проявлять творческий подход к решению различных проблем.
Вас отличает аналитичность, рационализм, независимость, оригинальность. Вы не склонны ориентироваться на социальные нормы. Обладаете достаточно развитыми математическими способностями, хорошей формулировкой и изложением мыслей, склонностью к решению логических, абстрактных задач.
Люди этого типа, в основном, предпочитают профессии научно -исследовательского направления: в деятельности которых необходимы творческие способности и нестандартное мышление. Межличностные отношения в структуре деятельности играют незначительную роль.
Рекомендуемые профессии: научные творческие профессии познавательного интеллектуального типа: физик, химик, астроном, математик, биолог, географ, геолог, философ, лингвист.
"),
                        [3] = Tuple.Create("социальный тип", @"Вы – «коммуникатор». Любите работать с людьми и для людей, поэтому тебя, вероятно, заинтересует работа, связанная с обучением, воспитанием, обслуживанием клиентов, оказанием помощи нуждающимся и т. п. Вам интересна эмоционально насыщенная, живая работа, предполагающая интенсивное взаимодействие с людьми и умение общаться. 
Ваша сильная сторона – умение убеждать, объяснять, влиять на поведение людей.
Вы гуманны, чувствительны, активны, ориентированы на социальные нормы. Способны к переживанию, умению войти и понять эмоциональное состояние другого человека. Обладаете хорошими вербальными (словесными) способностями, готовы входить в контакт с людьми (нуждаются в большом количестве контактов), математические способности развиты слабее. 
В основном люди этого типа ориентированы на труд, главным содержанием которого является взаимодействие с другими людьми, возможность решать задачи, предполагающие анализ поведения и обучения людей, сферы деятельности, требующие постоянного контакта и общения с людьми.
Рекомендуемые профессии: учитель, врач, психолог)
"),
                        [4] = Tuple.Create("конвенциональный или стандартный тип", @"Вам нравится работать с документами, текстами, цифрами, в том числе с использованием компьютерных средств. Подходит работа спокойная, без особого риска, с четким кругом обязанностей. Она может быть связана с обработкой информации, с расчетами, вычислениями, требующими точности, аккуратности, усидчивости. Вам хотелось бы избежать частого общения, необходимости управлять другими людьми и отвечать за их действия. 
Ваши сильные стороны — спокойствие, терпеливость, желание и способность к логической обработке информации и к глубокому изучению вопросов.
Вы практичны, конкретны, не любите отступать от задуманного, обладаете хорошей энергией, ориентированы на социальные нормы. Проявляете склонность к миру обозначений, часто переводите предметные свойства окружающего мира в знаковую систему. Отдаете предпочтение чётко определённой деятельности, выбираете из окружающей среды цели и задачи, поставленные перед ними обычаями и обществом. В основном выбираете профессии, связанные с канцелярскими и расчетными работами, созданием и оформлением документов, установлением количественных соотношений между числами, системами условных знаков, направленные на обработку информации, предоставленной в виде цифр, формул, текстов. Сфера общения в таких видах деятельности ограничена и не является ведущей, что вполне вас устраивает.
Коммуникативные и организаторские способности развиты слабо, но обладают достаточно высокими исполнительскими качествами.
Рекомендуемые профессии: бухгалтер, экономист, финансист, товаровед, делопроизводитель, нотариус.
"),
                        [5] = Tuple.Create("предприимчивый тип", @"Вы – организатор, ориентированный на активную преобразовательную деятельность. Вы предпочитаете работу, дающую относительную свободу, самостоятельность, обеспечивающую положение в обществе, превосходство над другими, материальное благополучие; работу азартную и рискованную, требующую инициативности, предприимчивости, во¬ли, умения брать ответственность на себя. 
Ваша сильная сторона – лидерские качества, смелость и решительность в решении различных вопросов.
Вы находчивы, практичны, быстро ориентируетесь в сложной обстановке, склонны к самостоятельному принятию решений, социальной активности, лидерству; имеют тягу к приключениям (возможно авантюрным). Вы обладаете достаточно развитыми коммуникативными способностями. Не предрасположены к занятиям, требующим усидчивости, большой и длительной концентрации внимания. Предпочтительной является деятельность, позволяющая проявлять энергию, организаторские способности. Сюда относятся профессии, связанные с руководством, управлением и общением в разных ситуациях с разными людьми, влиянием на убеждения людей.
Рекомендуемые профессии: журналист, репортер, телеоператор, дипломат, менеджер, брокер, а также должности начальника, заведующего, директора.
"),
                        [6] = Tuple.Create("художественный или артистический тип", @"Вы, вероятно, склонны быть «свободным художником». Вам подходят виды деятельности, дающие возможность творческого самовыражения в ситуациях, где нет жесткого режима, формальностей. Вам нравится работа, дающая простор фантазии, воображению, требующая развитого эстетического вкуса, творческих способностей (художественных, литературных, музыкальных). 
Ваша сильная сторона – оригинальность восприятия действительности, умение видеть жизнь не так, как все.
Вы независимы в принятии решений, редко ориентируетесь на социальные нормы и одобрение, обладаете собственным (часто сложным) взглядом на жизнь, гибкостью и скоростью мышления, высокой эмоциональной чувствительностью. Отношения с окружающими строите, опираясь на свои ощущения, эмоции, воображение, интуицию. Обладаете хорошей реакцией, координацией, развитым восприятием. В достаточной степени развиты коммуникативные способности. Профессиональная предрасположенность в наибольшей степени связана с актёрско-сценической, музыкальной, изобразительной деятельностью.
Рекомендуемые профессии: музыкант, художник, писатель, искусствовед, культуролог.
")
                    };

                    var res = methodic.Questions.SelectMany(x => x.Answers).GroupBy(x=> x.ScoreCount).Select(x=> Tuple.Create(x.Key, x.Count()));
                    var k = res.First(x => x.Item2 == res.Max(y => y.Item2));
                    var resultTuple = typeOfProffesional.First(x => x.Key == k.Item1).Value;

                    methodic.TestResult = new List<TestResult>
                    {
                        new TestResult($"Ваш тип профессиональной направленности - {resultTuple.Item1}", resultTuple.Item2)
                    };
                }
            };
        }



        public static Methodic HighSchool()
        {
            List<Question> questions = new List<Question>
            {
                CreateImportantlyScaleAnswer("Строить свою карьеру в пределах конкретной научной или технической сферы", "Профессиональная компетентность"),
                CreateImportantlyScaleAnswer("Осуществлять наблюдение и контроль над людьми, влиять на них на всех уровнях", "Менеджмент"),
                CreateImportantlyScaleAnswer("Иметь возможность делать все по-своему и не быть стесненным правилами какой-либо организации", "Автономия"),
                CreateImportantlyScaleAnswer("Иметь постоянное место работы с гарантированным окладом и социальной защищенностью", "Стабильность"),
                CreateImportantlyScaleAnswer("Употреблять свое умение общаться на пользу людям, помогать другим", "Служение"),
                CreateImportantlyScaleAnswer("Работать над проблемами, которые представляются почти неразрешимыми", "Вызов"),
                CreateImportantlyScaleAnswer("Вести такой образ жизни, чтобы интересы семьи и карьеры были уравновешены", "Интеграция стилей жизни"),
                CreateImportantlyScaleAnswer("Создать и построить нечто, что будет всецело моим произведением или идеей", "Предпринимательство"),
                CreateImportantlyScaleAnswer(@"Продолжать работу по своей специальности, чем получить более высокую должность, не связанную с моей специальностью", "Профессиональная компетентность"),
                CreateImportantlyScaleAnswer(@"Быть первым руководителем в организации", "Менеджмент"),
                CreateImportantlyScaleAnswer(@"Иметь работу, не связанную с режимом или другими организационными ограничениями", "Автономия"),
                CreateImportantlyScaleAnswer(@"Работать в организации, которая обеспечит мне стабильность на длительный период времени", "Стабильность"),
                CreateImportantlyScaleAnswer(@"Употребить свои умения и способности на то, чтобы сделать мир лучше", "Служение"),
                CreateImportantlyScaleAnswer(@"Соревноваться с другими и побеждать", "Вызов"),
                CreateImportantlyScaleAnswer(@"Строить карьеру, которая позволит мне не изменять моему образу жизни", "Интеграция стилей жизни"),
                CreateImportantlyScaleAnswer(@"Создать новое коммерческое пред¬приятие", "Предпринимательство"),
                CreateImportantlyScaleAnswer(@"Посвятить всю жизнь избранной профессии", "Профессиональная компетентность"),
                CreateImportantlyScaleAnswer(@"Занять высокую руководящую долж¬ность", "Менеджмент"),
                CreateImportantlyScaleAnswer(@"Иметь работу, которая предоставля¬ет максимум свободы и автономии в выборе характера занятий, времени выполнения и т. д.", "Автономия"),
                CreateImportantlyScaleAnswer(@"Оставаться на одном месте житель¬ства, чем переехать в связи с повышением", "Стабильность"),
                CreateImportantlyScaleAnswer(@"Иметь возможность использовать свои умения и талант для служения важной цели", "Служение"),
                CreateConsonantScaleAnswer(@"Единственная действительная цель моей карьеры - находить и решать трудные проблемы, независимо от того, в какой области они возникли", "Вызов"),
                CreateConsonantScaleAnswer(@"Я всегда стремлюсь уделять одина¬ковое внимание моей семье и моей карьере", "Интеграция стилей жизни"),
                CreateConsonantScaleAnswer(@"Я всегда нахожусь в поиске идей, которые дадут мне возможность начать и построить свое собственное дело", "Предпринимательство"),
                CreateConsonantScaleAnswer(@"Я соглашусь на руководящую долж¬ность только в том случае, если она находится в сфере моей профессио¬нальной компетенции", "Профессиональная компетентность"),
                CreateConsonantScaleAnswer(@"Я хотел бы достичь такого положе¬ния в организации, которое давало бы возможность наблюдать за работой других и интегрировать их деятельность", "Менеджмент"),
                CreateConsonantScaleAnswer(@"В моей профессиональной деятель¬ности я более всего заботился о сво¬ей свободе и автономии", "Автономия"),
                CreateConsonantScaleAnswer(@"Для меня важнее остаться на нынеш¬нем месте жительства, чем получить повышение или новую работу в другой местности", "Стабильность"),
                CreateConsonantScaleAnswer(@"Я всегда искал работу, на которой мог бы приносить пользу другим", "Служение"),
                CreateConsonantScaleAnswer(@"Соревнование и выигрыш - это наи¬более важные и волнующие стороны моей карьеры", "Вызов"),
                CreateConsonantScaleAnswer(@"Карьера имеет смысл только в том случае, если она позволяет вести жизнь, которая мне нравится", "Интеграция стилей жизни"),
                CreateConsonantScaleAnswer(@"Предпринимательская деятельность составляет центральную часть моей карьеры", "Предпринимательство"),
                CreateConsonantScaleAnswer(@"Я бы скорее ушел из организации, чем стал заниматься работой, не связанной с моей профессией", "Профессиональная компетентность"),
                CreateConsonantScaleAnswer(@"Я буду считать, что достиг успеха в карьере только тогда, когда стану руководителем высокого уровня в солид¬ной организации", "Менеджмент"),
                CreateConsonantScaleAnswer(@"Я не хочу, чтобы меня стесняла какая-нибудь организация или мир бизнеса", "Автономия"),
                CreateConsonantScaleAnswer(@"Я предпочел бы работать в органи¬зации, которая обеспечивает дли¬тельный контракт", "Стабильность"),
                CreateConsonantScaleAnswer(@"Я хотел бы посвятить свою карьеру достижению важной и полезной цели", "Служение"),
                CreateConsonantScaleAnswer(@"Я чувствую себя преуспевающим только тогда, когда я постоянно вовлечен в решение трудных проблем или в ситуацию соревнования", "Вызов"),
                CreateConsonantScaleAnswer(@"Выбрать и поддерживать определенный образ жизни важнее, чем добиваться успеха в карьере", "Интеграция стилей жизни"),
                CreateConsonantScaleAnswer(@"Я всегда хотел основать и построить свой собственный бизнес", "Предпринимательство"),
                CreateConsonantScaleAnswer(@"Я предпочитаю работу, которая не связана с командировками", "Стабильность"),
            };

            int i = 1;
            questions.ForEach(x => x.Number = i++);

            return new Methodic()
            {
                Questions = questions,
                CalcResult = (methodic) =>
                {
                    Dictionary<string, string> typeOfProffesional = new Dictionary<string, string>
                    {
                        ["Профессиональная компетентность"] = @"Эта установка связана с наличием способностей и талантов в определенной области (научные исследования, техническое проектирование, финансовый анализ и т. д.). Люди с такой установкой хотят быть мастерами сво¬его дела, они бывают особенно счастливы, когда достигают успеха в профессиональной сфере, но быстро теряют интерес к работе, которая не позволяет развивать свои способности. Одновременно  люди ищут признания своих талантов, что должно выражаться в статусе, подобающем их мастерству. Они готовы управлять другими в пределах своей компетентности, но управление не представляет для них особого интереса. Поэтому многие из этой категории отвергают работу менеджера, управление рассматривают как необходимое условие для продвижения в своей профессиональной сфере. Обычно это самая многочисленная группа в большинстве организаций, обеспечивающая принятие в организации компетентных решений.",
                        ["Менеджмент"] = @"В данном случае первостепенное значение имеет ориентация личности на интеграцию усилий других людей, полнота ответственности за конечный результат и соединение различных функций организации. Понимание этой карьерной ориентации связано с возрастом и опытом работы. Такая работа требует не только аналитических навыков, но и навыков межличностного и группового общения, эмоциональной уравновешенности, чтобы нести бремя власти и ответственности. Человек с карьерной ориентацией на менеджмент будет считать, что не достиг целей своей карьеры, пока не займет должность, на которой будет управлять различными сторонами деятельности предприятия: финансами, маркетингом, производством, разработками, продажами.",
                        ["Автономия"] = @"Первичная забота для личности этой ориентацией - освобождение от организационных правил, предписаний и ограничений. Ярко выражена потребность все делать по-своему, самому решать, когда, над чем и сколько работать. Такой человек не хочет подчиняться правилам организации (рабочее время, место работы, форменная одежда). Конечно, каждый из нас до некоторой степени нуждается в автономии, однако если такая ориентация выражена сильно, то личность готова отказаться от продвижения по службе и от других возможностей ради сохранения своей независимости. Такой человек может работать в организации, которая обеспечивает достаточную степень свободы, не будет чувствовать серьезных обязательств или преданности организации и будет отвергать любые попытки ограничить его автономность.",
                        ["Стабильность"] = @"Эта карьерная ориентация обусловлена потребностью в безопасности и стабильности для того, чтобы будущие жиз¬ненные события были предсказуемы. Необходимо различать два типа стабильности - стабильность места работы и стабильность места жительства. Стабильность места работы подразумевает поиск ра¬боты в такой организации, которая обеспечивает определенный срок службы, имеет хорошую репутацию, заботится о своих работниках-пенсионерах и платит большие пенсии, выглядит более надежной в своей отрасли. Человек с такой ориентацией - его часто называют «человеком организации» - ответственность за управление карьерой перекладывает на нанимателя. Он будет совершать какие угодно гео¬графические передвижения, если того потребует компания. Человек второго типа, ориентированный на стабильность места жительства, связывает себя с географическим регионом, «пуская корни» в опре¬деленном месте, вкладывая сбережения в свой дом, и меняет работу или организацию только тогда, когда это не сопровождается его «сры¬ванием с места». Люди, ориентированные на стабильность, могут быть талантливыми и подниматься на высокие должности в организации, но, предпочитая стабильную работу и жизнь, они откажутся от повы¬шения, если оно грозит риском и временными неудобствами, даже в случае широко открывающихся возможностей.",
                        ["Служение"] = @"Основными ценностями при данной ориентации являются «работа с людьми», «служение человечеству», «помощь людям», «желание сделать мир лучше» и т.д. Человек с такой ориентацией не будет работать в организации, которая враждебна его целям и ценностям, и откажется от продвижения или перевода на другую работу, если это не позволит реализовать главные ценности жизни. Люди с такой карьерной ориентацией чаще всего работают в области образования, охраны окружающей среды, проверки качества продукции и товаров, защиты прав потребителей и т. д.",
                        ["Вызов"] = @"Основные ценности в карьерной ориентации этого типа — конкуренция, победа над другими, преодоление препятствий, решение трудных задач. Человек ориентирован на то, чтобы «бросать вызов». Социальная ситуация чаще всего рассматривается с позиции «выигрыша-проигрыша». Процессы борьбы и победа более важны для человека, чем конкретная область деятельности или квалификация. Например, торговый агент может рассматривать каждый контакт с покупателем как игру, которую надо выиграть. Новизна, разнообразие и вызов имеют для людей с такой ориентацией очень большую ценность, и, если все происходит слишком просто, им становится скучно.",
                        ["Интеграция стилей жизни"] = @"Человек с такой карьерной ориентацией ориентирован на интеграцию различных сторон образа жизни. Он не хочет, чтобы в его жизни доминировала только семья или только карьера, или только саморазвитие. Он хочет, чтобы все это было сбалансированно. Такой человек больше ценит свою жизнь в целом - где живет, как совершенствуется, — чем конкретную работу, карьеру или организацию.",
                        ["Предпринимательство"] = @"Человек с такой карьерной ориентацией стремится создавать что-то новое, он хочет преодолевать препятствия, готов к риску. Он не желает работать на других, а хочет иметь свою «марку», свое дело, финансовое богатство. Причем это не всегда творческий человек, для него главное - создать дело, концепцию или организацию, построить ее так, чтобы это было как бы продолжением его самого, вложить туда душу. Предприниматель будет продолжать свое дело, даже если сначала он будет терпеть неудачи и ему придется серьезно рисковать.",
                    };

                    var sample = methodic.Questions.GroupBy(x => x.Group).Select(x=> Tuple.Create(x.Key, x.ToList().Select(y=> y.Answers.First())));

                    methodic.TestResult = new List<TestResult>();

                    if (!sample.Any(x=> x.Item2.Average(y=> y.ScoreCount) >= 5))
                    {
                        methodic.TestResult.Add(new TestResult("Карьерная ориентация отсутствие", "Возможно, карьера не является центральной в вашей жизни"));
                        return;
                    }

                    var res = sample.First(c => c.Item2.Average(y => y.ScoreCount) == sample.Max(x => x.Item2.Average(y => y.ScoreCount)));

                    methodic.TestResult.Add(new TestResult(res.Item1, typeOfProffesional.First(x => x.Key == res.Item1).Value));
                }
            };
        }
    }
}
